'''
是一种分类方法
一、参数
1.penalty : str, ‘l1’, ‘l2’, ‘elasticnet’ or ‘none’, optional (default=’l2’)
  惩罚项的范数。 ‘newton-cg’, ‘sag’ and ‘lbfgs’ solvers只支持 l2 .
  ‘elasticnet’ is only supported by the ‘saga’ solver. 
  If ‘none’ (not supported by the liblinear solver), no regularization is applied.
2.dual : bool, optional (default=False)
  对偶或者原始公式 Dual formulation is only implemented for l2 penalty with liblinear solver.
  样本数大于特征倾向于False(Prefer dual=False when n_samples > n_features)
3.tol : float, optional (default=1e-4)
  停止准则精度（Tolerance for stopping criteria）
4.C : float, optional (default=1.0)
  Inverse of regularization strength; must be a positive float. Like in SVM, smaller values specify stronger regularization.
5.fit_intercept : bool, optional (default=True)
  Specifies if a constant (a.k.a. bias or intercept) should be added to the decision function.
6.intercept_scaling : float, optional (default=1)
  Useful only when the solver ‘liblinear’ is used and self.fit_intercept is set to True. In this case, x becomes [x, self.intercept_scaling], i.e. a “synthetic” feature with constant value equal to intercept_scaling is appended to the instance vector. The intercept becomes intercept_scaling * synthetic_feature_weight.
  Note! the synthetic feature weight is subject to l1/l2 regularization as all other features. To lessen the effect of regularization on synthetic feature weight (and therefore on the intercept) intercept_scaling has to be increased.
7.class_weight : dict or ‘balanced’, optional (default=None)
  Weights associated with classes in the form {class_label: weight}. If not given, all classes are supposed to have weight one.
  The “balanced” mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as n_samples / (n_classes * np.bincount(y)).
  Note that these weights will be multiplied with sample_weight (passed through the fit method) if sample_weight is specified.
  New in version 0.17: class_weight=’balanced’
8.random_state : int, RandomState instance or None, optional (default=None)
   伪随机数种子 when shuffling the data. 
  If int, random_state is the seed used by the random number generator;
  If RandomState instance, random_state is the random number generator; 
  If None, the random number generator is the RandomState instance used by np.random. Used when solver == ‘sag’ or ‘liblinear’.
9.solver : str, {‘newton-cg’, ‘lbfgs’, ‘liblinear’, ‘sag’, ‘saga’}, optional (default=’liblinear’).
Algorithm to use in the optimization problem.
For small datasets, ‘liblinear’ is a good choice, whereas ‘sag’ and ‘saga’ are faster for large ones.
For multiclass problems, only ‘newton-cg’, ‘sag’, ‘saga’ and ‘lbfgs’ handle multinomial loss; ‘liblinear’ is limited to one-versus-rest schemes.
‘newton-cg’, ‘lbfgs’, ‘sag’ and ‘saga’ handle L2 or no penalty
‘liblinear’ and ‘saga’ also handle L1 penalty
‘saga’ also supports ‘elasticnet’ penalty
‘liblinear’ does not handle no penalty
Note that ‘sag’ and ‘saga’ fast convergence is only guaranteed on features with approximately the same scale. You can preprocess the data with a scaler from sklearn.preprocessing.
New in version 0.17: Stochastic Average Gradient descent solver.
New in version 0.19: SAGA solver.
Changed in version 0.20: Default will change from ‘liblinear’ to ‘lbfgs’ in 0.22.
10.max_iter : int, optional (default=100)
  Maximum number of iterations taken for the solvers to converge.
11.multi_class : str, {‘ovr’, ‘multinomial’, ‘auto’}, optional (default=’ovr’)
  If the option chosen is ‘ovr’, then a binary problem is fit for each label. 
For ‘multinomial’ the loss minimised is the multinomial loss fit across the entire probability distribution, even when the data is binary. ‘multinomial’ is unavailable when solver=’liblinear’. 
‘auto’ selects ‘ovr’ if the data is binary, or if solver=’liblinear’, and otherwise selects ‘multinomial’.
New in version 0.18: Stochastic Average Gradient descent solver for ‘multinomial’ case.
Changed in version 0.20: Default will change from ‘ovr’ to ‘auto’ in 0.22.
12.verbose : int, optional (default=0)
  For the liblinear and lbfgs solvers set verbose to any positive number for verbosity.
13.warm_start : bool, optional (default=False)
  When set to True, reuse the solution of the previous call to fit as initialization, otherwise, just erase the previous solution. Useless for liblinear solver. See the Glossary.
  New in version 0.17: warm_start to support lbfgs, newton-cg, sag, saga solvers.
14.n_jobs : int or None, optional (default=None)
  Number of CPU cores used when parallelizing over classes if multi_class=’ovr’”. This parameter is ignored when the solver is set to ‘liblinear’ regardless of whether ‘multi_class’ is specified or not. None means 1 unless in a joblib.parallel_backend context. -1 means using all processors. See Glossary for more details.
15.l1_ratio : float or None, optional (default=None)
  The Elastic-Net mixing parameter, with 0 <= l1_ratio <= 1. Only used if penalty='elasticnet'`. Setting ``l1_ratio=0 is equivalent to using penalty='l2', while setting l1_ratio=1 is equivalent to using penalty='l1'. For 0 < l1_ratio <1, the penalty is a combination of L1 and L2.
Attributes:
二、属性
1.classes_ : array, shape (n_classes, )
    A list of class labels known to the classifier.
2.coef_ : array, shape (1, n_features) or (n_classes, n_features)
    Coefficient of the features in the decision function.
    coef_ is of shape (1, n_features) when the given problem is binary. In particular, when multi_class='multinomial', coef_ corresponds to outcome 1 (True) and -coef_ corresponds to outcome 0 (False).
3.intercept_ : array, shape (1,) or (n_classes,)
    Intercept (a.k.a. bias) added to the decision function.
    If fit_intercept is set to False, the intercept is set to zero. intercept_ is of shape (1,) when the given problem is binary. In particular, when multi_class='multinomial', intercept_ corresponds to outcome 1 (True) and -intercept_ corresponds to outcome 0 (False).
4.n_iter_ : array, shape (n_classes,) or (1, )
    Actual number of iterations for all classes. If binary or multinomial, it returns only 1 element. For liblinear solver, only the maximum number of iteration across all classes is given.
    Changed in version 0.20: In SciPy <= 1.0.0 the number of lbfgs iterations may exceed max_iter. n_iter_ will now report at most max_iter.
'''
>>> from sklearn.datasets import load_iris
>>> from sklearn.linear_model import LogisticRegression
>>> X, y = load_iris(return_X_y=True)
>>> clf = LogisticRegression(random_state=0, solver='lbfgs',
                          multi_class='multinomial').fit(X, y)
>>> clf.predict(X[:2, :])
array([0, 0])
>>> clf.predict_proba(X[:2, :]) 
array([[9.8...e-01, 1.8...e-02, 1.4...e-08],
       [9.7...e-01, 2.8...e-02, ...e-08]])
>>> clf.score(X, y)#平均精度
0.97...
